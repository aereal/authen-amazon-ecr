---

name: Authenticate with Amazon ECR
description: Authenticate with Amazon ECR
author: aereal
branding:
  color: orange
  icon: log-in
inputs:
  version:
    description: command version
    default: 'latest'
    required: false
outputs:
  username:
    description: retrieved ECR username
    value: ${{ steps.authen.outputs.username }}
  password:
    description: retrieved ECR username
    value: ${{ steps.authen.outputs.password }}
  server:
    description: ECR repository server name
    value: ${{ steps.authen.outputs.server }}
runs:
  using: composite
  steps:
    - name: determine tag
      id: determine_tag
      shell: bash
      env:
        _version: ${{ inputs.version }}
      run: |
        curl -o release.json -fsLH 'accept: application/json' https://github.com/aereal/authen-amazon-ecr/releases/${_version}
        tag_name="$(jq -r '.tag_name | .[1:]' release.json)"
        echo "::set-output name=tag::${tag_name}"
    - name: restore cache
      id: use-cache
      uses: actions/cache@v3.0.9
      with:
        path: /opt/authen-amazon-ecr
        key: authen-amazon-ecr-${{ steps.determine_tag.outputs.tag }}
        restore-keys: |
          authen-amazon-ecr-
          authen-amazon-ecr-${{ steps.determine_tag.outputs.tag }}
    - name: install
      if: ${{ ! steps.use-cache.outputs.cache-hit }}
      shell: bash
      env:
        tag: ${{ steps.determine_tag.outputs.tag }}
      run: |
        archive_url="https://github.com/aereal/authen-amazon-ecr/releases/download/v${tag}/authen-amazon-ecr_${tag}_linux_amd64.tar.gz"
        echo "download ${archive_url} ..."
        curl -sfL ${archive_url} | tar xzf -
        mkdir -p /opt/authen-amazon-ecr/bin
        cp ./authen-amazon-ecr /opt/authen-amazon-ecr/bin/
    - name: run authenticate-amazon-ecr
      id: authen
      shell: bash
      run: /opt/authen-amazon-ecr/bin/authen-amazon-ecr
